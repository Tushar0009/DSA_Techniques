const int MOD = 1e9+7;
const int mod = 1e9+7;
const int N = 200100;



int pow_func(int num , int n) {
	num %=MOD;
	int ans = 1;
	while(n){
		if(n & 1){
			ans = (ans * num)%MOD;
		}
		num = (num * num)%MOD;
		n = n>>1;
	}
	return ans%MOD;
}
inline int mul(int a, int b){
	return (a%MOD)*(b%mod)%mod;
}
int inverse(int x) {
	return pow_func(x , mod-2);
}
int gcd(int a , int b) {
	return __gcd(a , b);
}




vector<ll> fact,ifact,inv,pow2;
ll add(ll a, ll b, ll m = MOD)
{
	a+=b;
	if(abs(a)>=m) a%=m;
	if(a<0) a+=m;
	return a;
}
ll mult(ll a, ll b, ll m = MOD)
{
	if(abs(a)>=m) a%=m;
	if(abs(b)>=m) b%=m;
	a*=b;
	if(abs(a)>=m) a%=m;
	if(a<0) a+=m;
	return a;
}

ll choose(ll a, ll b, ll m = MOD)
{
	if(a<b) return 0;
	if(b==0) return 1;
	if(a==b) return 1;
	return mult(fact[a], mult(ifact[b], ifact[a - b], m), m);
}
void init(ll _n, ll m = MOD)
{
	fact.clear(); ifact.clear(); inv.clear(); pow2.clear();
	fact.resize(_n+1); ifact.resize(_n+1); inv.resize(_n+1); pow2.resize(_n+1);
	pow2[0]=1; ifact[0]=1; fact[0]=1;
	for(int i=1;i<=_n;i++){
		pow2[i] = add(pow2[i - 1], pow2[i - 1], m);
		fact[i] = mult(fact[i - 1], i, m);
	}
	ifact[_n] = inverse(fact[_n]);
	for(int i=_n-1;i>=1;i--){
		ifact[i] = mult(ifact[i + 1], i + 1, m);
	}
	for(int i=1;i<=_n;i++){
		inv[i] = mult(fact[i - 1], ifact[i], m);
	}
}
